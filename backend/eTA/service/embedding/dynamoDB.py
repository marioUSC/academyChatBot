import boto3
import json
import time

dynamodb = boto3.resource('dynamodb')
def create_new_table(name):
    table = dynamodb.create_table(
        TableName=name,
        KeySchema=[
            {
                'AttributeName': 'ID',
                'KeyType': 'HASH'  
            },
            {
                'AttributeName': 'CreatedTime',
                'KeyType': 'RANGE' 
            }
        ],
        AttributeDefinitions=[
            {
                'AttributeName': 'ID',
                'AttributeType': 'S'  
            },
            {
                'AttributeName': 'CreatedTime',
                'AttributeType': 'S'  
            }
        ],
        BillingMode='PAY_PER_REQUEST'
    )

    table.meta.client.get_waiter('table_exists').wait(TableName=name)

    print(f"Table {table.table_name} created successfully in On-Demand mode.")
    return

def put_new_items(table_name, items):
    if not check_table_exists(table_name):
        err = f"Table {table_name} does not exist or error occurred."
        print(err)
        return err

    table = dynamodb.Table(table_name)
    with table.batch_writer() as batch:
        for item in items:
            batch.put_item(Item=item)

    status = f"Table {table_name} write finished."
    print(status)
    return status

def check_table_exists(table_name):
    try:
        table = dynamodb.Table(table_name)
        _ = table.table_status  
        return True  
    except dynamodb.meta.client.exceptions.ResourceNotFoundException:
        return False
    except Exception:
        return False

def query_items(table_name, partition_key_value, limit=2, start_key=None):
    """
    Query items from a DynamoDB table in descending order based on a timestamp sort key.
    
    Args:
    - table_name (str): Name of the DynamoDB table.
    - partition_key_value (str): Value of the partition key to query.
    - limit (int): Maximum number of items to return.
    - start_key (dict): The starting point for the query (exclusive), provided as the
                        last evaluated key from a previous query. None starts from the latest item.
    
    Returns:
    - dict: Contains the queried items and the last evaluated key for pagination.
    """
    table = dynamodb.Table(table_name)
    
    query_params = {
        'KeyConditionExpression': 'ID = :pk',
        'ExpressionAttributeValues': {
            ':pk': partition_key_value
        },
        'ScanIndexForward': False,  
        'Limit': limit
    }
    
    if start_key:
        query_params['ExclusiveStartKey'] = start_key

    response = table.query(**query_params)

    # Extracting items and the last evaluated key for further pagination
    items = response.get('Items', [])
    last_evaluated_key = response.get('LastEvaluatedKey')

    return {
        'Items': items,
        'LastEvaluatedKey': last_evaluated_key
    }

def scan_items(table_name, start_key=None, limit=2):
    table = dynamodb.Table(table_name)

    scan_kwargs = {
        'Limit': limit
    }

    if start_key:
        scan_kwargs['ExclusiveStartKey'] = start_key

    response = table.scan(**scan_kwargs)

    items = response['Items']
    start_key = response.get('LastEvaluatedKey', None)

    result = {
        'returned_count': len(items),
        'startKey': start_key,
        'items': items,
        'message': 'scan successful',
        'status': 200
    }

    return result

def get_and_print_item(table_name, primary_key):
    table = dynamodb.Table(table_name)
    try:
        response = table.get_item(
            Key=primary_key
        )
        item = response.get('Item', None)
        if item:
            data = item
            message = 'Item found'
            status = 200
        else:
            data = 'None'
            message = 'Item not exist'
            status = 404
        
        result = {
            'status': status,
            'message': message, 
            'data' : data
        }
        # result = json.dumps(result, default=str)
        return result
        
    except Exception as e:
        print("Error getting item:", e)
        result = {
            'status': 500,
            'message': 'Exception catached', 
            'data' : 'None'
        }
        # result = json.dumps(result, default=str)
        return result

def delete_item(table_name, primary_key):
    table = dynamodb.Table(table_name)
    try:
        response = table.delete_item(
            Key=primary_key
        )
        result = {
            'status': 200,
            'message': 'Deleted successfully', 
            'data' : 'None'
        }
        return result
    except Exception as e:
        result = {
            'status': 400,
            'message': 'Exception catached when deleting the item', 
            'data' : 'None'
        }
        return result

def scan_all_items(table_name):
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table(table_name)

    scan_kwargs = {}
    items = []

    while True:
        response = table.scan(**scan_kwargs)
        items.extend(response['Items'])

        if 'LastEvaluatedKey' not in response:
            break  

        scan_kwargs['ExclusiveStartKey'] = response['LastEvaluatedKey']
        # break

    return items

def update_single_item(table_name, primary_key, original_text, embedding):
    table = dynamodb.Table(table_name)

    update_expression = 'SET OriginalText = :originalText, Embedding = :embedding'

    try:
        table.update_item(
            Key=primary_key,
            UpdateExpression=update_expression,
            ExpressionAttributeValues={
                ':originalText': original_text,
                ':embedding': embedding
            },
            ReturnValues="UPDATED_NEW"
        )
        return {'status': 200, 'message': 'Item updated successfully'}
    except Exception as e:
        return {'status': 400, 'message': str(e)}

def main():
    # delete_item("EE450", {'ID' : "-3723379543205394297", 'CreatedTime' : '2024-03-04T14:23:53.473595' })
    # get_and_print_item("EE450", {'ID' : "-3723379543205394297", 'CreatedTime' : '2024-03-04T14:23:53.473595' })
    # start_time = time.time()
    # result = scan_all_items("EE450")
    # end_time = time.time()

    # 计算持续时间
    test = update_dynamodb_item("EE450", {"ID": "-3985936073442209917", "CreatedTime":"2024-03-04T14:23:53.473395"}, "updated text111", "[0.21421419084072113, -0.7242329716682434, -0.06343680620193481, 0.12059822678565979, 0.05476390942931175, 0.610324501991272, -0.18010146915912628, -0.04964449629187584, 0.16969440877437592, -0.34223389625549316, -0.5101243257522583, 0.025458119809627533, 0.14318129420280457, -0.33338627219200134, -0.23726396262645721, -0.2570619583129883, 0.02257663384079933, -0.4195348620414734, -0.1904744803905487, 0.27936258912086487, 0.29686659574508667, -0.22520838677883148, -0.15877695381641388, -0.4418644309043884, 0.2492695301771164, -0.3934059143066406, 0.40277013182640076, -0.2685089409351349, 0.17304112017154694, 0.012875218875706196, 0.2857421040534973, 0.1688051074743271, -0.16756781935691833, -0.19734665751457214, -0.4634370803833008, -0.2694961130619049, 0.17596660554409027, 0.3041470944881439, 0.008633525110781193, -0.18902099132537842, -0.21965612471103668, 0.1649397909641266, -0.3042127192020416, -0.4948422312736511, 0.32079359889030457, -0.16464626789093018, -0.7872121930122375, -0.05506131425499916, -0.3401082754135132, 0.9311549067497253, -0.6213945150375366, 0.1296793818473816, 0.3112446963787079, 0.6663402318954468, -0.30732548236846924, 0.2200949490070343, 0.5619806051254272, -0.10629361867904663, -0.006760539952665567, 0.0867733359336853, -0.16203032433986664, 0.4750021696090698, 0.2260729819536209, 0.02345450036227703, -0.2022542506456375, -0.5827780365943909, 0.3338738679885864, -0.08468907326459885, -0.3202713429927826, 0.772908627986908, -0.11248225718736649, 0.25529682636260986, -0.24501213431358337, 0.16411836445331573, 0.2697322964668274, -0.06033151224255562, 0.5553955435752869, -0.35131505131721497, -0.4113579988479614, -0.14044946432113647, -0.22624872624874115, -0.7289656400680542, -0.3892011046409607, 0.24082623422145844, 0.3380774259567261, -0.48097023367881775, 0.13498087227344513, -0.04215201735496521, -0.0708458423614502, -0.550277829170227, 0.17865195870399475, -0.49811843037605286, -0.19641345739364624, -0.16605885326862335, -0.33208760619163513, -0.5045245885848999, 0.24591554701328278, -0.29307329654693604, -0.2194589227437973, 0.5011610984802246, -0.13149863481521606, 0.5876604914665222, 0.31043103337287903, -0.6217910051345825, -0.35114163160324097, -0.288101464509964, 0.30399173498153687, -0.347897469997406, -0.07323320209980011, 0.60355144739151, -0.15747053921222687, 0.11316825449466705, 0.10158991813659668, -0.08754924684762955, 0.15607301890850067, 0.5438397526741028, 0.4720628261566162, 0.4322097599506378, 0.13553032279014587, 0.27842244505882263, -0.5096829533576965, 0.2156139463186264, 0.12786266207695007, -0.5337844491004944, 0.02094033546745777, 0.08018890768289566, 0.11278346180915833, 0.0004620167601387948, -0.12615260481834412, -0.4810533821582794, 0.3676774799823761, 0.12525716423988342, -0.7196860313415527, -0.3183422088623047, -0.10265234857797623, 0.46722760796546936, 0.050058841705322266, -0.6120849847793579, 0.3280532956123352, -0.21108411252498627, 0.2384154051542282, -0.1353832185268402, 0.04248974472284317, -0.3019721210002899, -0.026577623561024666, 0.19447527825832367, -0.3240439295768738, 0.1542292982339859, -0.263376384973526, 0.21382135152816772, 0.2558636963367462, -0.03961661458015442, 0.1901114583015442, -0.16052012145519257, 0.05187774449586868, 0.9162623286247253, -0.8044901490211487, -0.17452482879161835, 0.19058291614055634, 0.3632037341594696, -0.029229002073407173, 0.25628191232681274, -0.09713872522115707, -0.008580334484577179, 0.35085394978523254, -0.22029685974121094, 0.597040593624115, 0.19709573686122894, -0.23731306195259094, -0.38344627618789673, 0.4273708462715149, -0.11540625244379044, 0.3568381667137146, -0.11613787710666656, 0.011029928922653198, 0.011265710927546024, 0.1618141233921051, 0.33606547117233276, -0.24806661903858185, -0.44135844707489014, 0.545116126537323, -0.5987021327018738, 0.017923599109053612, -0.2619008421897888, 0.3785504996776581, -0.33076781034469604, -0.21337462961673737, -0.023449916392564774, -0.11391519755125046, 0.2501407563686371, -0.026540517807006836, -0.09596925973892212, -0.619381308555603, 0.0473545603454113, 0.43916648626327515, 0.1084529459476471, 0.13168516755104065, 0.813474714756012, -0.13167566061019897, -0.12859755754470825, -0.41248106956481934, 0.10277054458856583, 0.21496757864952087, 0.08209347724914551, -0.055886950343847275, -0.165605366230011, 0.20106922090053558, 0.34967097640037537, 0.14271892607212067, -0.05105338618159294, -0.38380178809165955, 0.16297492384910583, 0.03614947944879532, 0.11325161904096603, 0.09404131025075912, 0.3577577769756317, 0.5329598188400269, -0.12249023467302322, 0.567283570766449, 0.4138301908969879, 1.3813620805740356, -0.027753032743930817, -0.5215707421302795, -0.03226176276803017, -0.35973820090293884, -0.69785475730896, 0.0030350838787853718, -0.245899498462677, 0.3172890841960907, -0.20881296694278717, -0.3510247766971588, -0.41076645255088806, 0.33914145827293396, 0.5357567667961121, 0.20984818041324615, 0.2556181252002716, -0.06665083020925522, 0.5891304016113281, 0.007699450943619013, -0.02967316098511219, -0.0773693397641182, 0.3075169622898102, -0.20506343245506287, 0.5302836298942566, -0.11782998591661453, 0.13184723258018494, -0.5052577257156372, 0.4185259938240051, -0.5511091351509094, -0.3955482840538025, -0.52022784948349, 0.485147625207901, -0.15002578496932983, -0.512222170829773, 0.4645461440086365, 0.4611597955226898, -0.47730037569999695, -0.4626835882663727, 0.17418543994426727, 0.03659205138683319, -0.5995272994041443, 0.405747652053833, -0.09564187377691269, -0.23643963038921356, -0.43679946660995483, 0.1054815948009491, -0.76346355676651, -0.15860985219478607, -0.48146572709083557, -0.20946456491947174, 0.2964339554309845, -0.5001658797264099, 0.11206702142953873, 0.27020251750946045, 0.37669071555137634, 0.860825777053833, -0.09962393343448639, 0.22936441004276276, 0.09635862708091736, 0.31074580550193787, -0.15922850370407104, 0.07560112327337265, -0.06427709758281708, -0.098961241543293, -0.7598334550857544, 0.7804121375083923, 0.6693753004074097, 0.33340996503829956, -0.2766416668891907, 0.27358418703079224, 0.28630030155181885, 0.20774270594120026, -0.7173011898994446, -0.3843846917152405, 0.8674054145812988, -0.008315039798617363, 0.644583523273468, 0.09326503425836563, 0.44529399275779724, 0.664550244808197, -0.14274242520332336, 0.6795302629470825, 0.22798572480678558, -0.5050898790359497, 0.49726390838623047, 0.10311330854892731, -0.009851953946053982, 0.35873210430145264, -0.07515750080347061, -1.1993964910507202, 0.17936605215072632, -0.0033192557748407125, -0.18451406061649323, -0.1687609702348709, -0.3323466181755066, -0.7235961556434631, 0.27957671880722046, 0.8172129988670349, 0.8076601624488831, -0.03889957442879677, -0.5020889043807983, 0.7196056842803955, 0.1511496901512146, -0.025181863456964493, -0.5421594977378845, 0.3876332640647888, -0.3247135877609253, -0.13527853786945343, -0.648134171962738, 0.20047566294670105, 0.3169809877872467, -0.012403161264955997, -0.8407672047615051, 0.8029876947402954, 0.6506602764129639, 0.00823591835796833, -0.4077158570289612, 0.06554262340068817, 0.37051016092300415, -0.020097410306334496, 0.6184269189834595, 0.09653154015541077, -0.22784197330474854, 0.09375569224357605, -0.0023585751187056303, -0.5171894431114197, 0.7997947335243225, 0.3372126817703247, 0.009663240052759647, 0.14988422393798828, 0.7176554203033447, -0.326892614364624, -0.4873940944671631, -0.4156149923801422, 0.5776028633117676, 0.20451627671718597, -0.1456199437379837, -0.22446779906749725, 0.06627899408340454, -0.0022298588883131742, 0.12022513896226883, -0.18524755537509918, 0.5796343684196472, 0.38143280148506165, 0.19234786927700043, -0.06972002983093262, 0.33844056725502014, -0.8175395131111145, -0.06037704274058342, -0.3042348623275757, -0.503195583820343, -0.4443143606185913, -0.309989869594574, -0.502883791923523, 0.5368750691413879, 0.5889919400215149, 0.18204164505004883, 0.5054618716239929, -0.09909140318632126, -0.4694080948829651, -0.003861155128106475, 0.2076214849948883, -0.14032438397407532, 0.0854284018278122, 0.09088017791509628, -0.21610762178897858, -0.5050198435783386, -0.3822452425956726, -0.5108519792556763, -0.0010389512171968818, 0.13554547727108002, 0.45802244544029236, -0.0030813429038971663, -0.38715872168540955, 0.7386075854301453, -0.21079346537590027, -0.6510811448097229, 0.3206985890865326, -0.7793370485305786, -0.5403090119361877, -0.3938438594341278, -0.3996656537055969, 0.516485869884491, 0.21676786243915558, -0.3013894557952881, -0.5883803367614746, 0.20373471081256866, 0.039320822805166245, 0.6498476266860962, -0.006811072584241629, 0.14577814936637878, 0.4278528690338135, -0.37498345971107483, 0.6185581684112549, 0.4192192256450653, 0.18231886625289917, -0.15899452567100525, -0.34131038188934326, -0.18782690167427063, 0.12730911374092102, -0.39194291830062866, 0.10021374374628067, -0.020663628354668617, -0.885054886341095, -0.6684548854827881, 0.1039615124464035, 0.9000000953674316, 0.8674132823944092, 0.0502597913146019, 0.7632696032524109, -0.3613227605819702, 0.32917407155036926, -0.2794215977191925, 0.022138457745313644, 0.07434682548046112, 0.3378184735774994, -0.6287118196487427, 0.26607829332351685, 0.3169354498386383, 0.2503964304924011, 0.322092741727829, -0.09254824370145798, -0.0183772724121809, -0.43941521644592285, -0.12836328148841858, 0.9607434868812561, -0.039857130497694016, 0.025218797847628593, 0.027704615145921707, -0.17894378304481506, 0.14648981392383575, 0.019417624920606613, -0.24532827734947205, -0.09276621788740158, -0.1970704346895218, 0.3250595033168793, -0.29597610235214233, -0.40388527512550354, 0.45890912413597107, -0.4597402513027191, 0.4827544391155243, -0.7323241233825684, -0.12456092238426208, -0.2490941286087036, -0.2847689986228943, -0.07266373187303543, -0.40169063210487366, 0.3971254825592041, -0.0020623053424060345, -0.034754686057567596, -0.4962698519229889, 0.25142067670822144, 0.3791063129901886, 0.7823007702827454, -0.27329543232917786, 0.12184160202741623, -0.4780100882053375, 0.2905624806880951, 0.04559052363038063, 0.028063811361789703, 0.008755226619541645, -0.09913738071918488, -0.006483499426394701, -0.14469444751739502, 0.4773801863193512, -0.2671564221382141, -0.3609074056148529, -0.3266065716743469, -0.1835448294878006, -0.359444260597229, 0.014118817634880543, 0.33962470293045044, 0.1928301751613617, -0.23137517273426056, 0.12406002730131149, 0.6635614037513733, 0.1718822717666626, 0.22647380828857422, -0.11267177760601044, 0.5321285128593445, 0.8650841116905212, -0.08868920058012009, -0.31181734800338745, 0.8759848475456238, -0.005724976304918528, -0.3844170868396759, -0.31985336542129517, 0.11441172659397125, -0.2664673924446106, -0.5069707632064819, -0.4128528833389282, 0.5758413672447205, 0.6193985342979431, -0.33248937129974365, 0.26847898960113525, -0.14790008962154388, -0.7392407059669495, 0.2868955135345459, -0.9404547810554504, 0.05014685541391373, 0.171395942568779, -0.894977867603302, -0.01917203702032566, -0.5414626598358154, -1.3238722085952759, -0.5242679715156555, 0.23582643270492554, -0.11692165583372116, 0.06556813418865204, 0.1413726508617401, 0.17143753170967102, -0.45551884174346924, 0.015700187534093857, -0.654950737953186, 0.04505908861756325, -0.8909595608711243, 0.6677994132041931, 0.07664213329553604, 0.6058728694915771, -0.9332771301269531, 0.1003708690404892, -0.0920502096414566, -0.8712782859802246, -0.37404391169548035, -0.22246325016021729, -0.23667040467262268, -0.12603186070919037, -0.20729488134384155, 0.6904935240745544, -0.07730662077665329, -0.14382459223270416, -0.5308380126953125, -0.7524558305740356, -0.17639386653900146, 0.04981279373168945, -0.5720223188400269, 0.16508489847183228, 0.159315288066864, 0.24396197497844696, -0.23171626031398773, -0.6629717946052551, -0.47125452756881714, 0.31593582034111023, 0.26198992133140564, 0.16371160745620728, 0.023322144523262978, -0.9049234986305237, 0.047167595475912094, 0.0638701394200325, -0.8506386876106262, -0.6107788681983948, 0.2594059109687805, 0.1665133684873581, -0.3488650918006897, 0.4958486557006836, 0.1407994031906128, -0.056374941021203995, 0.15028849244117737, -0.020731303840875626, -0.714347243309021, -0.10481904447078705, 0.5967754125595093, 0.2602660059928894, 0.02554214373230934, -0.03747475519776344, -0.21612168848514557, 0.6576665639877319, 0.07087539881467819, 0.3116794228553772, 0.8981403708457947, 0.11314231157302856, 0.7507750988006592, 0.19161877036094666, -0.6403717398643494, 0.15008769929409027, -0.06976816058158875, 0.8127743601799011, 0.06681651622056961, -0.37746885418891907, -0.11008299887180328, 0.0982552021741867, 0.19121849536895752, 0.05206165090203285, -0.32728472352027893, 0.1438669115304947, 0.7255600690841675, -0.27241435647010803, -0.19978095591068268, -0.25795167684555054, -0.01640031859278679, 0.38702303171157837, 0.30543312430381775, 0.6042438745498657, 0.4055550694465637, -0.06285139173269272, -0.2122730314731598, -0.04150623828172684, -0.14487214386463165, 0.9986526370048523, 0.6494007706642151, 0.09423637390136719, -0.03370222449302673, 0.18627068400382996, -0.28838256001472473, 0.43250060081481934, -0.1227937713265419, 0.06463406980037689, -0.406389057636261, 0.5586996674537659, 0.32371261715888977, -0.28983134031295776, -0.07426147907972336, -0.6225247383117676, 0.22647343575954437, 0.4794084429740906, 0.23181752860546112, 0.06901038438081741, -0.1602264791727066, 0.7030797600746155, 0.2822974920272827, -0.45159462094306946, 0.6917759776115417, -0.6705824732780457, -0.30960091948509216, 0.6278948783874512, -0.906143069267273, 0.25899115204811096, 0.010842330753803253, 0.2927896976470947, -0.121980682015419, -0.12951251864433289, -0.3851880431175232, -0.5274884700775146, 0.2038734257221222, 0.6202529072761536, -0.16490919888019562, -0.6291292905807495, -0.0013934267917647958, -0.25393956899642944, -0.07952505350112915, -0.9763925671577454, 0.3534317910671234, -0.19562382996082306, 0.21659161150455475, -0.3084588348865509, -0.6819998025894165, -0.042808517813682556, -0.1619264781475067, -0.02896212786436081, -0.12827526032924652, 0.12919560074806213, -0.3562612235546112, 0.5448823571205139, 0.6075254082679749, 0.6841549277305603, 0.39979830384254456, 0.6295474171638489, 0.4925304651260376, -0.25997278094291687, 0.24120907485485077, -0.3124583959579468, -0.7162744402885437, -0.28391262888908386, -1.0170413255691528, -0.5039788484573364, 0.1415991634130478, 0.021716510877013206, 1.1675639152526855, 0.1763133853673935, -0.45538681745529175, 0.10216903686523438, -0.0665149986743927, -0.5306693911552429, 0.3366395831108093, -0.042408689856529236, -0.14825135469436646, 0.4185407757759094, 0.14629477262496948, -0.24260222911834717, 0.005669762846082449, 0.12544921040534973, 0.4672832787036896, -0.3299683928489685, 0.049592141062021255, -0.2381913810968399, -0.11290132254362106, 0.08550099283456802, 0.12972955405712128, 0.29014331102371216, 0.3678911328315735, 0.7809843420982361, -0.2350321114063263, 0.19387565553188324, 0.07830691337585449, 0.43539607524871826, -0.16370733082294464, -0.4554242789745331, -0.27300962805747986, 0.15063464641571045, 0.05038660392165184, 0.08572189509868622, -0.28209808468818665, -0.8265920877456665, 0.24551385641098022, 0.2129165381193161, 0.0031662641558796167, 0.4384792745113373, -0.5499204993247986, 0.13362178206443787, -0.4522295892238617, -0.25331443548202515, 0.6333403587341309, -0.8530672788619995, -0.5871192216873169, 0.12355801463127136, 0.031126530840992928, -0.5027846693992615, 0.6138319969177246, -0.3562997877597809, -0.5314067006111145, 0.35004082322120667, -0.434455931186676, 0.42114248871803284, -0.05524280294775963, 0.6277995109558105, -0.0866967961192131, 0.035843685269355774, 0.4696931838989258, -0.6729820370674133, 0.0673624724149704, -0.00547062186524272, 0.492119699716568, -0.7635735273361206, 0.6436595916748047, 0.2948414981365204, 0.2802867889404297, 0.41612330079078674, -0.07884415984153748, -0.3517056107521057, -0.7118516564369202, 0.7310966849327087, 0.16309642791748047, -0.42147305607795715, -0.5702438354492188, 0.21309128403663635, 0.17376264929771423, 0.01314630825072527, 0.22185570001602173]")
    print(test)
    return

if __name__ == '__main__':
    main()